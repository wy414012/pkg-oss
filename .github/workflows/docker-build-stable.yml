name: "docker build stable"

on:
  release:
    types: [published]
  pull_request:
    paths-ignore:
      - "README.md"
  push:
    branches:
      - stable-1.28

jobs:
  deb:
    name: "Nginx-BoringSSL (${{ matrix.os_version }})"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: "ghcr.io/wy414012/pkg-oss:latest-debian11-amd64"
            os_version: "Debian-11"
            os_type: "bullseye"
          - os: "ghcr.io/wy414012/pkg-oss:latest-debian12-amd64"
            os_version: "Debian-12"
            os_type: "bookworm"
    container:
      image: ${{ matrix.os }}
    continue-on-error: true
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          repository: google/boringssl
          path: debian/boringssl
          ref: main #b6eec48a579eff1abe70ce6d480a017d6ca3a32c #0.20241209.0

      - uses: actions/checkout@v4
        with:
          repository: wy414012/ngx-fancyindex
          path: debian/ngx-fancyindex

      - name: Update apt
        run: apt-get update

      - name: Install build -tool
        run: |
          apt-get install -y \
          libssl-dev \
          cmake \
          lsb-release \
          libxml2-utils \
          xsltproc \
          devscripts \
          quilt \
          git \
          libpcre2-dev \
          libmaxminddb-dev \
          libgd-dev \
          libedit-dev \
          libxml2-dev \
          libxslt-dev \
          libre2-dev \
          libc-ares-dev \
          libperl-dev \
          libkrb5-dev \
          libgeoip-dev \
          libyaml-cpp-dev \
          libboost-dev \
          libunwind-dev \
          golang

      - name: build boringssl
        working-directory: debian/boringssl
        run: |
          if [[ "${{ matrix.os }}" == "ghcr.io/wy414012/pkg-oss:latest-debian12-amd64" ]]; then
          sed -i 's/-Werror/-Werror -Wno-array-bounds/' CMakeLists.txt
          fi
          grep -rl "OpenSSL 1.1.1 (compatible; BoringSSL)". | xargs sed -i "s/OpenSSL 1.1.1 (compatible; BoringSSL)/BoringSSL Version_GitHash:$(git log --pretty=format:"%h" -n1) Build_Date:$(date +"%Y-%m-%d %H:%M:%S") (compatible; BoringSSL)/g"
          mkdir build && \
          cd build && \
          cmake -DOPENSSL_SMALL=1 -DCMAKE_BUILD_TYPE=Release .. && \
          make -j $(nproc)

      - name: build all
        working-directory: debian
        run: | 
          make \
          base \
          module-auth-spnego \
          module-brotli \
          module-encrypted-session \
          module-fips-check \
          module-geoip2 \
          module-geoip \
          module-headers-more \
          module-image-filter \
          module-lua \
          module-ndk \
          module-njs \
          module-otel \
          module-passenger \
          module-perl \
          module-rtmp \
          module-set-misc \
          module-subs-filter \
          module-xslt

      - name: Move Files
        working-directory: debian
        run: |
          mkdir -p deb
          mv ../../nginx* ./deb/

      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
           name: deb-${{ matrix.os_type }}
           path: ./debian/deb/nginx*
           compression-level: 0

  rpm:
    name: "Nginx-BoringSSL (${{ matrix.os_version }})"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os: "ghcr.io/wy414012/pkg-oss:latest-rockylinux9-amd64"
            os_version: "Rocky Linux 9"
            os_type: "rockylinux9"
          - os: "ghcr.io/wy414012/pkg-oss:latest-rockylinux8-amd64"
            os_version: "Rocky Linux 8"
            os_type: "rockylinux8"
          - os: "ghcr.io/wy414012/pkg-oss:latest-opencloudos9-amd64"
            os_version: "OpenCloudOS 9"
            os_type: "opencloudos9"
          - os: "ghcr.io/wy414012/pkg-oss:latest-tencentos4-amd64"
            os_version: "TenCentos 4"
            os_type: "tencentos4"
    container:
      image: ${{ matrix.os }}
    continue-on-error: true
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - uses: actions/checkout@v4
        with:
          repository: google/boringssl
          path: rpm/boringssl
          ref: main #b6eec48a579eff1abe70ce6d480a017d6ca3a32c #0.20241209.0

      - uses: actions/checkout@v4
        with:
          repository: wy414012/ngx-fancyindex
          path: rpm/ngx-fancyindex

      - name: Setup ${{ matrix.os_version }} Linux
        run: |
          dnf makecache
          (dnf install -y epel-release 'dnf-command(config-manager)' || dnf install -y epol-release 'dnf-command(config-manager)') || true
          if [[ ${{ matrix.os }} == "ghcr.io/wy414012/pkg-oss:latest-rockylinux8-amd64" ]]; then
            dnf config-manager --set-enabled powertools
            dnf -y install gcc-toolset-11-gcc-c++
          elif [[ ${{ matrix.os }} == "ghcr.io/wy414012/pkg-oss:latest-rockylinux9-amd64" ]]; then
            dnf config-manager --set-enabled crb
          fi
          dnf update -y

      - name: Install Development Tools
        run: |
          dnf -y install \
              git \
              gcc \
              gcc-c++ \
              make \
              rpm-build \
              tar \
              golang \
              cmake \
              libunwind-devel \
              pcre2-devel \
              krb5-devel \
              libedit \
              systemd \
              libxml2-devel \
              libxslt-devel \
              gd-devel \
              libmaxminddb \
              perl-ExtUtils-Embed \
              perl-devel \
              c-ares-devel \
              openssl-devel \
              re2-devel \
              boost-devel \
              libstdc++-devel \
              yaml-cpp-devel \
              rake \
              brotli-devel \
              which \
              libatomic \
              libedit-devel \
              libmaxminddb-devel \
              libstdc++-static \
              lua-devel \
              perl-macros \
              xz

      - name: build boringssl
        working-directory: rpm/boringssl
        run: |
          if [[ "${{ matrix.os }}" == "ghcr.io/wy414012/pkg-oss:latest-rockylinux8-amd64" ]]; then
          source /opt/rh/gcc-toolset-11/enable
          fi
          if [[ "${{ matrix.os }}" == "ghcr.io/wy414012/pkg-oss:latest-tencentos4-amd64" ]]; then
          sed -i 's/-Werror/-Werror -Wno-array-bounds/' CMakeLists.txt
          fi
          if [[ "${{ matrix.os }}" == "ghcr.io/wy414012/pkg-oss:latest-opencloudos9-amd64" ]]; then
          sed -i 's/-Werror/-Werror -Wno-array-bounds/' CMakeLists.txt
          fi          
          grep -rl "OpenSSL 1.1.1 (compatible; BoringSSL)". | xargs sed -i "s/OpenSSL 1.1.1 (compatible; BoringSSL)/BoringSSL Version_GitHash:$(git log --pretty=format:"%h" -n1) Build_Date:$(date +"%Y-%m-%d %H:%M:%S") (compatible; BoringSSL)/g"
          mkdir build && \
          cd build && \
          cmake -DOPENSSL_SMALL=1 -DCMAKE_BUILD_TYPE=Release .. && \
          make -j $(nproc)

      - name: build all
        working-directory: rpm/SPECS
        run: |
          make \
          base \
          module-auth-spnego \
          module-brotli \
          module-encrypted-session \
          module-fips-check \
          module-geoip2 \
          module-geoip \
          module-headers-more \
          module-image-filter \
          module-lua \
          module-ndk \
          module-njs \
          module-otel \
          module-passenger \
          module-perl \
          module-rtmp \
          module-set-misc \
          module-subs-filter \
          module-xslt

      - name: upload artifact
        uses: actions/upload-artifact@v4
        with:
           name: rpm-${{ matrix.os_type }}
           path: |
              ./rpm/RPMS
              ./rpm/SRPMS
           compression-level: 0
  apk:
    name: "Nginx-BoringSSL (${{ matrix.os_name }} ${{ matrix.os_version }})"        
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - target: "modules"
            os_name: "alpine"
            os_version: "v3.20"
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4 
      - uses: actions/checkout@v4
        with:
          repository: google/boringssl
          path: alpine/boringssl
          ref: main #b6eec48a579eff1abe70ce6d480a017d6ca3a32c #0.20241209.0
          
      - uses: actions/checkout@v4
        with:
          repository: wy414012/ngx-fancyindex
          path: alpine/ngx-fancyindex

      - name: Setup Alpine Linux
        uses: jirutka/setup-alpine@v1
        with:
          branch: v3.20
          packages: >
            abuild
            build-base
            coreutils
            curl
            findutils
            git
            make
            xz
            cmake
            go
            libunwind
            libunwind-dev
            date
            grep
            sed

      - name: set build ${{ matrix.target }} 
        shell: alpine.sh {0}
        working-directory: alpine
        run: |
          targets=""
          case ${{ matrix.target }} in
            base)
              targets="base"
            ;;
            modules)
              targets="base"
              for target in $(make list-all-modules | cut -d ' ' -f 1); do
                targets="$targets module-$target";
              done
            ;;
          esac
          echo TARGETS=$targets >> $GITHUB_ENV

      - name: Create depends
        shell: alpine.sh {0}
        working-directory: alpine
        run: |
          for target in $TARGETS; do
            make abuild-$target;
          done

      - name: Install depends
        shell: alpine.sh --root {0}
        working-directory: alpine
        run: |
          for target in ${TARGETS}; do
            apk add $(. ./abuild-${target}/APKBUILD; echo $makedepends;)
          done

      - name: build boringssl
        shell: alpine.sh {0}
        working-directory: alpine/boringssl
        run: |
          grep -rl "OpenSSL 1.1.1 (compatible; BoringSSL)". | xargs sed -i "s/OpenSSL 1.1.1 (compatible; BoringSSL)/BoringSSL Version_GitHash:$(git log --pretty=format:"%h" -n1) Build_Date:$(date +"%Y-%m-%d %H:%M:%S") (compatible; BoringSSL)/g"
          mkdir build && \
          cd build && \
          cmake -DOPENSSL_SMALL=1 -DCMAKE_BUILD_TYPE=Release .. && \
          make -j $(nproc)

      - name: Build ${{ matrix.target }}
        shell: alpine.sh {0}
        working-directory: alpine
        run: |
          for target in $TARGETS; do
            make $target;
          done

      - name: Copy apk
        shell: alpine.sh {0}
        if: ${{ !cancelled() }}
        run: |
          mkdir -p ./apk
          find ~/packages/alpine -type f -exec cp {} ./apk/ \;

      - name: upload ${{ matrix.target }} artifact
        uses: actions/upload-artifact@v4
        with:
           name: apk-${{ matrix.target }}
           path: ./apk/*.apk
           compression-level: 0        
  deploy:
    name: "Rsync Nginx Packages"
    needs:
      - deb
      - rpm
      - apk
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - os_type: "rockylinux9"
            target_folder: "centos/stable/9/"
            package_type: "rpm"
          - os_type: "rockylinux8"
            target_folder: "centos/stable/8/"
            package_type: "rpm"
          - os_type: "opencloudos9"
            target_folder: "opencloudos/stable/9/"
            package_type: "rpm"
          - os_type: "tencentos4"
            target_folder: "tencentos/stable/4/"
            package_type: "rpm"
          - os_type: "bullseye"
            target_folder: "debian/bullseye/stable/"
            package_type: "deb"
          - os_type: "bookworm"
            target_folder: "debian/bookworm/stable/"
            package_type: "deb"
          - os_type: "modules"
            target_folder: "alpine/stable/"
            package_type: "apk"

    continue-on-error: true
    steps:
      - name: Download ${{matrix.package_type}}-${{matrix.os_type}}
        uses: actions/download-artifact@v4
        with:
          name: ${{matrix.package_type}}-${{matrix.os_type}}
          path: .

      - name: rsync web server-${{matrix.os_type}}
        env:
          SECRET_CHECK_SCRIPT_URL: ${{ secrets.SECRET_CHECK_SCRIPT_URL }}
          SSH_PRIVATE_KEY: ${{ secrets.GIT_PRIVATE_KEY }}
          TARGET_FOLDER: ${{ matrix.target_folder }}
          PACKAGE_TYPE: ${{ matrix.package_type }}
        run: |
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "StrictHostKeyChecking no" >> ~/.ssh/config
          if [ "$PACKAGE_TYPE" == "rpm" ]; then
            rsync -avz --progress ./{RPMS/x86_64,SRPMS} $SECRET_CHECK_SCRIPT_URL$TARGET_FOLDER
          elif [ "$PACKAGE_TYPE" == "apk" ]; then
            rsync -avz --progress ./*.apk $SECRET_CHECK_SCRIPT_URL$TARGET_FOLDER  
          else
            rsync -avz --progress ./nginx* $SECRET_CHECK_SCRIPT_URL$TARGET_FOLDER
          fi